import React, { useState, useEffect } from 'react';
import { useApp } from '../context/AppContext';

interface ColumnInfo {
  name: string;
  type: string;
  nullable?: boolean;
  default?: any;
}

interface OfferData {
  [key: string]: any;
}

const Offers: React.FC = () => {
  const { activeConnection } = useApp();
  const [offers, setOffers] = useState<OfferData[]>([]);
  const [columns, setColumns] = useState<ColumnInfo[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [tableExists, setTableExists] = useState<boolean>(true);

  const fetchOffers = async () => {
    try {
      setLoading(true);
      
      // Build query parameters
      const params = new URLSearchParams();
      if (activeConnection?.name) {
        params.append('conn', activeConnection.name);
      }
      
      const response = await fetch(`http://localhost:3001/api/offers?${params}`);
      
      if (!response.ok) {
        if (response.status === 404) {
          const errorData = await response.json();
          setTableExists(false);
          setError(errorData.message || 'Offers table not found');
          setOffers([]);
          setColumns([]);
          return;
        }
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      
      if (!data.success) {
        if (!data.tableExists) {
          setTableExists(false);
          setError(data.message || data.error || 'Offers table not found');
          setOffers([]);
          setColumns([]);
          return;
        }
        throw new Error(data.error || 'Unknown error occurred');
      }

      setTableExists(data.tableExists);
      setOffers(data.rows || []);
      setColumns(data.columns || []);
      setError(null);
    } catch (err) {
      console.error('Error fetching offers:', err);
      setError(err instanceof Error ? err.message : 'An error occurred while fetching offers');
      setOffers([]);
      setColumns([]);
      setTableExists(true); // Assume it exists, just had a different error
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchOffers();
  }, [activeConnection]);

  const getCreateScript = () => {
    const dbType = activeConnection?.client || 'pg';
    
    switch (dbType) {
      case 'mysql':
      case 'mysql2':
        return `-- MySQL Offers Table Creation Script
CREATE TABLE Offers (
    OfferId INT AUTO_INCREMENT PRIMARY KEY,
    OfferName VARCHAR(100) NOT NULL,
    Description TEXT,
    DiscountPercent DECIMAL(5,2),
    StartDate DATE,
    EndDate DATE,
    IsActive BOOLEAN DEFAULT TRUE,
    CreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Insert sample data
INSERT INTO Offers (OfferName, Description, DiscountPercent, StartDate, EndDate, IsActive) VALUES
('Black Friday Sale', 'Special discount for Black Friday weekend', 25.00, '2024-11-29', '2024-12-01', TRUE),
('Summer Special', 'Summer vacation music collection discount', 15.00, '2024-06-01', '2024-08-31', TRUE),
('New Customer Offer', 'Welcome discount for new customers', 10.00, '2024-01-01', '2024-12-31', TRUE),
('Holiday Bundle', 'Special pricing for holiday album collections', 20.00, '2024-12-01', '2024-12-31', TRUE);`;

      case 'oracledb':
        return `-- Oracle Offers Table Creation Script
CREATE TABLE Offers (
    OfferId NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    OfferName VARCHAR2(100) NOT NULL,
    Description CLOB,
    DiscountPercent NUMBER(5,2),
    StartDate DATE,
    EndDate DATE,
    IsActive NUMBER(1) DEFAULT 1,
    CreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Insert sample data
INSERT INTO Offers (OfferName, Description, DiscountPercent, StartDate, EndDate, IsActive) VALUES
('Black Friday Sale', 'Special discount for Black Friday weekend', 25.00, DATE '2024-11-29', DATE '2024-12-01', 1);
INSERT INTO Offers (OfferName, Description, DiscountPercent, StartDate, EndDate, IsActive) VALUES
('Summer Special', 'Summer vacation music collection discount', 15.00, DATE '2024-06-01', DATE '2024-08-31', 1);
INSERT INTO Offers (OfferName, Description, DiscountPercent, StartDate, EndDate, IsActive) VALUES
('New Customer Offer', 'Welcome discount for new customers', 10.00, DATE '2024-01-01', DATE '2024-12-31', 1);
INSERT INTO Offers (OfferName, Description, DiscountPercent, StartDate, EndDate, IsActive) VALUES
('Holiday Bundle', 'Special pricing for holiday album collections', 20.00, DATE '2024-12-01', DATE '2024-12-31', 1);

COMMIT;`;

      case 'mssql':
        return `-- SQL Server Offers Table Creation Script
CREATE TABLE Offers (
    OfferId INT IDENTITY(1,1) PRIMARY KEY,
    OfferName NVARCHAR(100) NOT NULL,
    Description NTEXT,
    DiscountPercent DECIMAL(5,2),
    StartDate DATE,
    EndDate DATE,
    IsActive BIT DEFAULT 1,
    CreatedAt DATETIME2 DEFAULT GETDATE()
);

-- Insert sample data
INSERT INTO Offers (OfferName, Description, DiscountPercent, StartDate, EndDate, IsActive) VALUES
('Black Friday Sale', 'Special discount for Black Friday weekend', 25.00, '2024-11-29', '2024-12-01', 1),
('Summer Special', 'Summer vacation music collection discount', 15.00, '2024-06-01', '2024-08-31', 1),
('New Customer Offer', 'Welcome discount for new customers', 10.00, '2024-01-01', '2024-12-31', 1),
('Holiday Bundle', 'Special pricing for holiday album collections', 20.00, '2024-12-01', '2024-12-31', 1);`;

      default: // PostgreSQL
        return `-- PostgreSQL Offers Table Creation Script
CREATE TABLE Offers (
    OfferId SERIAL PRIMARY KEY,
    OfferName VARCHAR(100) NOT NULL,
    Description TEXT,
    DiscountPercent DECIMAL(5,2),
    StartDate DATE,
    EndDate DATE,
    IsActive BOOLEAN DEFAULT TRUE,
    CreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Insert sample data
INSERT INTO Offers (OfferName, Description, DiscountPercent, StartDate, EndDate, IsActive) VALUES
('Black Friday Sale', 'Special discount for Black Friday weekend', 25.00, '2024-11-29', '2024-12-01', TRUE),
('Summer Special', 'Summer vacation music collection discount', 15.00, '2024-06-01', '2024-08-31', TRUE),
('New Customer Offer', 'Welcome discount for new customers', 10.00, '2024-01-01', '2024-12-31', TRUE),
('Holiday Bundle', 'Special pricing for holiday album collections', 20.00, '2024-12-01', '2024-12-31', TRUE);`;
    }
  };

  const [showScriptModal, setShowScriptModal] = useState(false);

  const copyToClipboard = async () => {
    const script = getCreateScript();
    
    // Try modern clipboard API first
    if (navigator.clipboard && navigator.clipboard.writeText) {
      try {
        await navigator.clipboard.writeText(script);
        alert('✅ Create script copied to clipboard successfully!');
        return;
      } catch (err) {
        console.warn('Modern clipboard API failed:', err);
      }
    }
    
    // Fallback to legacy method
    try {
      const textArea = document.createElement('textarea');
      textArea.value = script;
      textArea.style.position = 'fixed';
      textArea.style.left = '-9999px';
      textArea.style.top = '-9999px';
      document.body.appendChild(textArea);
      textArea.focus();
      textArea.select();
      
      const successful = document.execCommand('copy');
      document.body.removeChild(textArea);
      
      if (successful) {
        alert('✅ Create script copied to clipboard successfully!');
        return;
      }
    } catch (err) {
      console.warn('Legacy clipboard method failed:', err);
    }
    
    // If all clipboard methods fail, show modal with script
    console.log('All clipboard methods failed, showing modal for manual copy');
    setShowScriptModal(true);
  };

  return (
    <div className="p-6">
      <h1 className="text-2xl font-bold text-gray-900 mb-4">Offers</h1>
      <p className="text-gray-600 mb-6">
        Manage and view promotional offers and discounts available to customers. This section displays all active and scheduled promotional campaigns.
      </p>
      {loading ? (
        <div className="animate-pulse">
          <div className="h-8 bg-gray-200 rounded w-1/4 mb-6"></div>
          <div className="space-y-3">
            <div className="h-4 bg-gray-200 rounded"></div>
            <div className="h-4 bg-gray-200 rounded w-5/6"></div>
            <div className="h-4 bg-gray-200 rounded w-4/6"></div>
          </div>
        </div>
      ) : error && !tableExists ? (
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-6">
          <div className="flex items-start">
            <div className="flex-shrink-0">
              <svg className="h-6 w-6 text-blue-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            </div>
            <div className="ml-3 flex-1">
              <h3 className="text-lg font-medium text-blue-800 mb-2">
                Offers Table Not Found
              </h3>
              <p className="text-blue-700 mb-4">
                The "Offers" table doesn't exist in the current database schema. This table is expected to contain promotional offers and discount information.
              </p>
              
              <div className="text-blue-700 mb-4">
                <p className="font-medium mb-2">Example Table Structure:</p>
                <ul className="list-disc list-inside space-y-1 text-sm">
                  <li>OfferId - Unique identifier</li>
                  <li>Title - Offer name/title</li>
                  <li>Description - Offer details</li>
                  <li>DiscountPercentage - Discount amount</li>
                  <li>StartDate - When offer begins</li>
                  <li>EndDate - When offer expires</li>
                  <li>IsActive - Whether offer is active</li>
                </ul>
              </div>
              
              <p className="text-blue-700 mb-4">
                Once the table is created with data, refresh this page to view the offers.
              </p>
              
              <div className="flex space-x-3">
                <button
                  onClick={copyToClipboard}
                  className="inline-flex items-center px-4 py-2 border border-blue-300 text-sm font-medium rounded-md text-blue-700 bg-blue-50 hover:bg-blue-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                >
                  <svg className="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                  </svg>
                  Copy Table Creation Script
                </button>
                <button
                  onClick={() => setShowScriptModal(true)}
                  className="inline-flex items-center px-4 py-2 border border-blue-300 text-sm font-medium rounded-md text-blue-700 bg-white hover:bg-blue-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                >
                  <svg className="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                  </svg>
                  View Script
                </button>
                <button
                  onClick={fetchOffers}
                  className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                >
                  <svg className="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                  </svg>
                  Refresh
                </button>
              </div>
            </div>
          </div>
        </div>
      ) : error ? (
        <div className="bg-red-50 border border-red-200 rounded-md p-4">
          <div className="text-red-800">Error: {error}</div>
          <button
            onClick={fetchOffers}
            className="mt-2 bg-red-100 px-3 py-2 rounded-md text-sm font-medium text-red-800 hover:bg-red-200"
          >
            Try again
          </button>
        </div>
      ) : offers.length === 0 ? (
        <div className="text-center py-12">
          <h3 className="mt-2 text-sm font-medium text-gray-900">No offers found</h3>
          <p className="mt-1 text-sm text-gray-500">
            There are no offers in the database, or the Offers table does not exist.
          </p>
        </div>
      ) : (
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                {columns.map((column) => (
                  <th
                    key={column.name}
                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                  >
                    {column.name}
                  </th>
                ))}
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {offers.map((offer, index) => (
                <tr key={index} className="hover:bg-gray-50">
                  {columns.map((column) => (
                    <td key={column.name} className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                      {String(offer[column.name] || '')}
                    </td>
                  ))}
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}

      {/* Script Modal for manual copy */}
      {showScriptModal && (
        <div 
          className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50"
          onClick={() => setShowScriptModal(false)}
        >
          <div 
            className="relative top-20 mx-auto p-5 border w-11/12 max-w-4xl shadow-lg rounded-md bg-white"
            onClick={(e) => e.stopPropagation()}
          >
            <div className="mt-3">
              <div className="flex justify-between items-center mb-4">
                <h3 className="text-lg font-medium text-gray-900">
                  {activeConnection?.client === 'mysql' || activeConnection?.client === 'mysql2' ? 'MySQL' :
                   activeConnection?.client === 'oracledb' ? 'Oracle' :
                   activeConnection?.client === 'mssql' ? 'SQL Server' : 'PostgreSQL'} Create Script
                </h3>
                <button
                  onClick={() => setShowScriptModal(false)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
              
              <p className="text-sm text-gray-600 mb-4">
                Copy this script and run it in your database to create the Offers table:
              </p>
              
              <div className="bg-gray-50 border border-gray-200 rounded-lg p-4 mb-4">
                <pre className="text-sm text-gray-800 whitespace-pre-wrap overflow-x-auto max-h-96">
                  {getCreateScript()}
                </pre>
              </div>
              
              <div className="flex justify-end space-x-3">
                <button
                  onClick={() => {
                    // Try to copy again from the modal
                    const script = getCreateScript();
                    const textArea = document.createElement('textarea');
                    textArea.value = script;
                    document.body.appendChild(textArea);
                    textArea.select();
                    try {
                      document.execCommand('copy');
                      alert('Script copied to clipboard!');
                    } catch {
                      alert('Please manually select and copy the text above');
                    }
                    document.body.removeChild(textArea);
                  }}
                  className="px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                >
                  Try Copy Again
                </button>
                <button
                  onClick={() => setShowScriptModal(false)}
                  className="px-4 py-2 bg-gray-300 text-gray-700 text-sm font-medium rounded-md hover:bg-gray-400 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500"
                >
                  Close
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Offers;
